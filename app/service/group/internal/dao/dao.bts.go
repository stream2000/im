// Code generated by kratos tool genbts. DO NOT EDIT.

/*
  Package dao is a generated cache proxy package.
  It is generated from:
  type Dao interface {
		Close()
		GetAllGroupsByUserId(ctx context.Context, uid int64)(groups []*model.Group,err error);
		GetAllGroups(ctx context.Context)(groups []*model.Group,err error)
		CreateGroup(ctx context.Context,req *pb.CreateGroupReq)(info *pb.GroupInfo, err error)
		// bts:  -nullcache=&model.Group{Id:0} -check_null_code=$!=nil&&$.Id==0 -sync=true
		Group(ctx context.Context,gid int64)(*model.Group,error)
	}
*/

package dao

import (
	"context"

	"chat/app/service/group/internal/model"
	"github.com/bilibili/kratos/pkg/cache"
)

// Group get data from cache if miss will call source method, then add to cache.
func (d *dao) Group(c context.Context, gid int64) (res *model.Group, err error) {
	addCache := true
	res, err = d.CacheGroup(c, gid)
	if err != nil {
		addCache = false
		err = nil
	}
	defer func() {
		if res != nil && res.Id == 0 {
			res = nil
		}
	}()
	if res != nil {
		cache.MetricHits.Inc("bts:Group")
		return
	}
	cache.MetricMisses.Inc("bts:Group")
	res, err = d.RawGroup(c, gid)
	if err != nil {
		return
	}
	miss := res
	if miss == nil {
		miss = &model.Group{Id: 0}
	}
	if !addCache {
		return
	}
	d.AddCacheGroup(c, gid, miss)
	return
}
