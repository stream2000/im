// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

package api

import (
	"context"

	bm "github.com/bilibili/kratos/pkg/net/http/blademaster"
	"github.com/bilibili/kratos/pkg/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathPushPing = "/push.interface.v1.Push/Ping"
var PathPushPushUser = "/push/user"

// PushBMServer is the server API for Push service.
type PushBMServer interface {
	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	// `midware:"auth"`
	PushUser(ctx context.Context, req *PushUserReq) (resp *google_protobuf1.Empty, err error)
}

var PushSvc PushBMServer

func pushPing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := PushSvc.Ping(c, p)
	c.JSON(resp, err)
}

func pushPushUser(c *bm.Context) {
	p := new(PushUserReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := PushSvc.PushUser(c, p)
	c.JSON(resp, err)
}

// RegisterPushBMServer Register the blademaster route
func RegisterPushBMServer(e *bm.Engine, server PushBMServer, midMap map[string]bm.HandlerFunc) {
	auth := midMap["auth"]
	PushSvc = server
	e.GET("/push.interface.v1.Push/Ping", pushPing)
	e.POST("/push/user", auth, pushPushUser)
}
