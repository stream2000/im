// Code generated by kratos tool genmc. DO NOT EDIT.

/*
  Package dao is a generated mc cache package.
  It is generated from:
  type _mc interface {
		// mc: -key=keyAcInfo -type=get
		CacheAuthInfo(c context.Context, email string) (resp *model.AuthInfo,err error)
		// mc: -key=keyAcInfo -expire=d.demoExpire
		AddCacheAuthInfo(c context.Context, email string,info *model.AuthInfo) (err error)
		// mc: -key=keyAcInfo
		DeleteCacheAuthInfo(c context.Context, email string) (err error)
	}
*/

package dao

import (
	"context"
	"fmt"

	"chat/app/interface/passport/internal/model"
	"github.com/bilibili/kratos/pkg/cache/memcache"
	"github.com/bilibili/kratos/pkg/log"
)

var _ _mc

// CacheAuthInfo get data from mc
func (d *dao) CacheAuthInfo(c context.Context, id string) (res *model.AuthInfo, err error) {
	key := keyAcInfo(id)
	res = &model.AuthInfo{}
	if err = d.mc.Get(c, key).Scan(res); err != nil {
		res = nil
		if err == memcache.ErrNotFound {
			err = nil
		}
	}
	if err != nil {
		log.Errorv(c, log.KV("CacheAuthInfo", fmt.Sprintf("%+v", err)), log.KV("key", key))
		return
	}
	return
}

// AddCacheAuthInfo Set data to mc
func (d *dao) AddCacheAuthInfo(c context.Context, id string, val *model.AuthInfo) (err error) {
	if val == nil {
		return
	}
	key := keyAcInfo(id)
	item := &memcache.Item{Key: key, Object: val, Expiration: d.demoExpire, Flags: memcache.FlagJSON}
	if err = d.mc.Set(c, item); err != nil {
		log.Errorv(c, log.KV("AddCacheAuthInfo", fmt.Sprintf("%+v", err)), log.KV("key", key))
		return
	}
	return
}

// DeleteCacheAuthInfo delete data from mc
func (d *dao) DeleteCacheAuthInfo(c context.Context, id string) (err error) {
	key := keyAcInfo(id)
	if err = d.mc.Delete(c, key); err != nil {
		if err == memcache.ErrNotFound {
			err = nil
			return
		}
		log.Errorv(c, log.KV("DeleteCacheAuthInfo", fmt.Sprintf("%+v", err)), log.KV("key", key))
		return
	}
	return
}
